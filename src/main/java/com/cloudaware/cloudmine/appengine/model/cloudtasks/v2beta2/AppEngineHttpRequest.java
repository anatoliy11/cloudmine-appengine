/*
 * Copyright 2010 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * (build: 2017-09-26 19:19:48 UTC)
 * on 2017-10-23 at 22:53:17 UTC 
 * Modify at your own risk.
 */

package com.cloudaware.cloudmine.appengine.model.cloudtasks.v2beta2;

/**
 * App Engine HTTP request.
 * <p>
 * The message defines the HTTP request that is sent to an App Engine app when the task is
 * dispatched.
 * <p>
 * This proto can only be used for tasks in a queue which has Queue.app_engine_http_target set.
 * <p>
 * Using AppEngineHttpRequest requires [`appengine.applications.get`](/appengine/docs/admin-api
 * /access-control) Google IAM permission for the project and the following scope:
 * <p>
 * `https://www.googleapis.com/auth/cloud-platform`
 * <p>
 * The task will be delivered to the App Engine app which belongs to the same project as the queue.
 * For more information, see [How Requests are Routed](/appengine/docs/standard/python/how-requests-
 * are-routed) and how routing is affected by [dispatch
 * files](/appengine/docs/python/config/dispatchref).
 * <p>
 * The AppEngineRouting used to construct the URL that the task is delivered to can be set at the
 * queue-level or task-level:
 * <p>
 * *  If set, AppEngineHttpTarget.app_engine_routing_override is used for    all tasks in the queue,
 * no matter what the setting is for the    task-level app_engine_routing.
 * <p>
 * The `url` that the task will be sent to is:
 * <p>
 * * `url =` AppEngineRouting.host `+` AppEngineHttpRequest.relative_url
 * <p>
 * The task will be sent to a task handler by an HTTP request using the specified
 * AppEngineHttpRequest.http_method (for example POST, HTTP GET, etc). The task attempt has
 * succeeded if the task handler returns an HTTP response code in the range [200 - 299]. Error 503
 * is considered an App Engine system error instead of an application error. Requests returning
 * error 503 will be retried regardless of retry configuration and not counted against retry counts.
 * Any other response code or a failure to receive a response before the deadline is a failed
 * attempt.
 * <p>
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Tasks API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class AppEngineHttpRequest {

    /**
     * Task-level setting for App Engine routing.
     * <p>
     * If set, AppEngineHttpTarget.app_engine_routing_override is used for all tasks in the queue, no
     * matter what the setting is for the task-level app_engine_routing.
     * The value may be {@code null}.
     */
    @com.google.api.client.util.Key
    private AppEngineRouting appEngineRouting;

    /**
     * HTTP request headers.
     * <p>
     * This map contains the header field names and values. Headers can be set when the [task is
     * created](google.cloud.tasks.v2beta2.CloudTasks.CreateTask). Repeated headers are not supported
     * but a header value can contain commas.
     * <p>
     * Cloud Tasks sets some headers to default values:
     * <p>
     * * `User-Agent`: By default, this header is   `"AppEngine-Google;
     * (+http://code.google.com/appengine)"`.   This header can be modified, but Cloud Tasks will
     * append   `"AppEngine-Google; (+http://code.google.com/appengine)"` to the   modified `User-
     * Agent`.
     * <p>
     * If the task has an AppEngineHttpRequest.payload, Cloud Tasks sets the following headers:
     * <p>
     * * `Content-Type`: By default, the `Content-Type` header is set to   `"application/octet-
     * stream"`. The default can be overridden by explictly   setting `Content-Type` to a particular
     * media type when the   [task is created](google.cloud.tasks.v2beta2.CloudTasks.CreateTask).
     * For example, `Content-Type` can be set to `"application/json"`. * `Content-Length`: This is
     * computed by Cloud Tasks. This value is   output only. It cannot be changed.
     * <p>
     * The headers below cannot be set or overridden:
     * <p>
     * * `Host` * `X-Google-*` * `X-AppEngine-*`
     * <p>
     * In addition, some App Engine headers, which contain task-specific information, are also be sent
     * to the task handler; see [request headers](/appengine/docs/python/taskqueue/push/creating-
     * handlers#reading_request_headers).
     * The value may be {@code null}.
     */
    @com.google.api.client.util.Key
    private java.util.Map<String, String> headers;

    /**
     * The HTTP method to use for the request. The default is POST.
     * <p>
     * The app's request handler for the task's target URL must be able to handle HTTP requests with
     * this http_method, otherwise the task attempt will fail with error code 405 (Method Not
     * Allowed). See the Request-Line is not allowed for the resource identified by the Request-URI".
     * See [Writing a push task request handler](/appengine/docs/java/taskqueue/push/creating-
     * handlers#writing_a_push_task_request_handler) and the documentation for the request handlers in
     * the language your app is written in e.g. [python
     * RequestHandler](/appengine/docs/python/tools/webapp/requesthandlerclass).
     * The value may be {@code null}.
     */
    @com.google.api.client.util.Key
    private String httpMethod;

    /**
     * Payload.
     * <p>
     * The payload will be sent as the HTTP message body. A message body, and thus a payload, is
     * allowed only if the HTTP method is POST or PUT. It is an error to set a data payload on a task
     * with an incompatible HttpMethod.
     * The value may be {@code null}.
     */
    @com.google.api.client.util.Key
    private String payload;

    /**
     * The relative URL.
     * <p>
     * The relative URL must begin with "/" and must be a valid HTTP relative URL. It can contain a
     * path and query string arguments. If the relative URL is empty, then the root path "/" will be
     * used. No spaces are allowed, and the maximum length allowed is 2083 characters.
     * The value may be {@code null}.
     */
    @com.google.api.client.util.Key
    private String relativeUrl;

    /**
     * Task-level setting for App Engine routing.
     * <p>
     * If set, AppEngineHttpTarget.app_engine_routing_override is used for all tasks in the queue, no
     * matter what the setting is for the task-level app_engine_routing.
     *
     * @return value or {@code null} for none
     */
    public AppEngineRouting getAppEngineRouting() {
        return appEngineRouting;
    }

    /**
     * Task-level setting for App Engine routing.
     * <p>
     * If set, AppEngineHttpTarget.app_engine_routing_override is used for all tasks in the queue, no
     * matter what the setting is for the task-level app_engine_routing.
     *
     * @param appEngineRouting appEngineRouting or {@code null} for none
     */
    public AppEngineHttpRequest setAppEngineRouting(AppEngineRouting appEngineRouting) {
        this.appEngineRouting = appEngineRouting;
        return this;
    }

    /**
     * HTTP request headers.
     * <p>
     * This map contains the header field names and values. Headers can be set when the [task is
     * created](google.cloud.tasks.v2beta2.CloudTasks.CreateTask). Repeated headers are not supported
     * but a header value can contain commas.
     * <p>
     * Cloud Tasks sets some headers to default values:
     * <p>
     * * `User-Agent`: By default, this header is   `"AppEngine-Google;
     * (+http://code.google.com/appengine)"`.   This header can be modified, but Cloud Tasks will
     * append   `"AppEngine-Google; (+http://code.google.com/appengine)"` to the   modified `User-
     * Agent`.
     * <p>
     * If the task has an AppEngineHttpRequest.payload, Cloud Tasks sets the following headers:
     * <p>
     * * `Content-Type`: By default, the `Content-Type` header is set to   `"application/octet-
     * stream"`. The default can be overridden by explictly   setting `Content-Type` to a particular
     * media type when the   [task is created](google.cloud.tasks.v2beta2.CloudTasks.CreateTask).
     * For example, `Content-Type` can be set to `"application/json"`. * `Content-Length`: This is
     * computed by Cloud Tasks. This value is   output only. It cannot be changed.
     * <p>
     * The headers below cannot be set or overridden:
     * <p>
     * * `Host` * `X-Google-*` * `X-AppEngine-*`
     * <p>
     * In addition, some App Engine headers, which contain task-specific information, are also be sent
     * to the task handler; see [request headers](/appengine/docs/python/taskqueue/push/creating-
     * handlers#reading_request_headers).
     *
     * @return value or {@code null} for none
     */
    public java.util.Map<String, String> getHeaders() {
        return headers;
    }

    /**
     * HTTP request headers.
     * <p>
     * This map contains the header field names and values. Headers can be set when the [task is
     * created](google.cloud.tasks.v2beta2.CloudTasks.CreateTask). Repeated headers are not supported
     * but a header value can contain commas.
     * <p>
     * Cloud Tasks sets some headers to default values:
     * <p>
     * * `User-Agent`: By default, this header is   `"AppEngine-Google;
     * (+http://code.google.com/appengine)"`.   This header can be modified, but Cloud Tasks will
     * append   `"AppEngine-Google; (+http://code.google.com/appengine)"` to the   modified `User-
     * Agent`.
     * <p>
     * If the task has an AppEngineHttpRequest.payload, Cloud Tasks sets the following headers:
     * <p>
     * * `Content-Type`: By default, the `Content-Type` header is set to   `"application/octet-
     * stream"`. The default can be overridden by explictly   setting `Content-Type` to a particular
     * media type when the   [task is created](google.cloud.tasks.v2beta2.CloudTasks.CreateTask).
     * For example, `Content-Type` can be set to `"application/json"`. * `Content-Length`: This is
     * computed by Cloud Tasks. This value is   output only. It cannot be changed.
     * <p>
     * The headers below cannot be set or overridden:
     * <p>
     * * `Host` * `X-Google-*` * `X-AppEngine-*`
     * <p>
     * In addition, some App Engine headers, which contain task-specific information, are also be sent
     * to the task handler; see [request headers](/appengine/docs/python/taskqueue/push/creating-
     * handlers#reading_request_headers).
     *
     * @param headers headers or {@code null} for none
     */
    public AppEngineHttpRequest setHeaders(java.util.Map<String, String> headers) {
        this.headers = headers;
        return this;
    }

    /**
     * The HTTP method to use for the request. The default is POST.
     * <p>
     * The app's request handler for the task's target URL must be able to handle HTTP requests with
     * this http_method, otherwise the task attempt will fail with error code 405 (Method Not
     * Allowed). See the Request-Line is not allowed for the resource identified by the Request-URI".
     * See [Writing a push task request handler](/appengine/docs/java/taskqueue/push/creating-
     * handlers#writing_a_push_task_request_handler) and the documentation for the request handlers in
     * the language your app is written in e.g. [python
     * RequestHandler](/appengine/docs/python/tools/webapp/requesthandlerclass).
     *
     * @return value or {@code null} for none
     */
    public String getHttpMethod() {
        return httpMethod;
    }

    /**
     * The HTTP method to use for the request. The default is POST.
     * <p>
     * The app's request handler for the task's target URL must be able to handle HTTP requests with
     * this http_method, otherwise the task attempt will fail with error code 405 (Method Not
     * Allowed). See the Request-Line is not allowed for the resource identified by the Request-URI".
     * See [Writing a push task request handler](/appengine/docs/java/taskqueue/push/creating-
     * handlers#writing_a_push_task_request_handler) and the documentation for the request handlers in
     * the language your app is written in e.g. [python
     * RequestHandler](/appengine/docs/python/tools/webapp/requesthandlerclass).
     *
     * @param httpMethod httpMethod or {@code null} for none
     */
    public AppEngineHttpRequest setHttpMethod(String httpMethod) {
        this.httpMethod = httpMethod;
        return this;
    }

    /**
     * Payload.
     * <p>
     * The payload will be sent as the HTTP message body. A message body, and thus a payload, is
     * allowed only if the HTTP method is POST or PUT. It is an error to set a data payload on a task
     * with an incompatible HttpMethod.
     *
     * @return value or {@code null} for none
     * @see #decodePayload()
     */
    public String getPayload() {
        return payload;
    }

    /**
     * Payload.
     * <p>
     * The payload will be sent as the HTTP message body. A message body, and thus a payload, is
     * allowed only if the HTTP method is POST or PUT. It is an error to set a data payload on a task
     * with an incompatible HttpMethod.
     *
     * @return Base64 decoded value or {@code null} for none
     * @see #getPayload()
     * @since 1.14
     */
    public byte[] decodePayload() {
        return com.google.api.client.util.Base64.decodeBase64(payload);
    }

    /**
     * Payload.
     * <p>
     * The payload will be sent as the HTTP message body. A message body, and thus a payload, is
     * allowed only if the HTTP method is POST or PUT. It is an error to set a data payload on a task
     * with an incompatible HttpMethod.
     *
     * @param payload payload or {@code null} for none
     * @see #encodePayload()
     */
    public AppEngineHttpRequest setPayload(String payload) {
        this.payload = payload;
        return this;
    }

    /**
     * Payload.
     * <p>
     * The payload will be sent as the HTTP message body. A message body, and thus a payload, is
     * allowed only if the HTTP method is POST or PUT. It is an error to set a data payload on a task
     * with an incompatible HttpMethod.
     *
     * @see #setPayload()
     * <p>
     * <p>
     * The value is encoded Base64 or {@code null} for none.
     * </p>
     * @since 1.14
     */
    public AppEngineHttpRequest encodePayload(byte[] payload) {
        this.payload = com.google.api.client.util.Base64.encodeBase64URLSafeString(payload);
        return this;
    }

    /**
     * The relative URL.
     * <p>
     * The relative URL must begin with "/" and must be a valid HTTP relative URL. It can contain a
     * path and query string arguments. If the relative URL is empty, then the root path "/" will be
     * used. No spaces are allowed, and the maximum length allowed is 2083 characters.
     *
     * @return value or {@code null} for none
     */
    public String getRelativeUrl() {
        return relativeUrl;
    }

    /**
     * The relative URL.
     * <p>
     * The relative URL must begin with "/" and must be a valid HTTP relative URL. It can contain a
     * path and query string arguments. If the relative URL is empty, then the root path "/" will be
     * used. No spaces are allowed, and the maximum length allowed is 2083 characters.
     *
     * @param relativeUrl relativeUrl or {@code null} for none
     */
    public AppEngineHttpRequest setRelativeUrl(String relativeUrl) {
        this.relativeUrl = relativeUrl;
        return this;
    }

}
